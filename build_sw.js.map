{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","sw.js"],"names":[],"mappingskBAAkB,0BAAtB;AACA,IAAI,mBAAmB,qBAAvB;AACA,IAAI,YAAY,CACd,eADc,EAEd,gBAFc,CAAhB;;AAKA,IAAI,YAAY,cAAI,IAAJ,CAAS,gBAAT,EAA2B,CAA3B,EAA8B,UAAS,SAAT,EAAoB;AAChE,UAAO,UAAU,UAAjB;AACE,SAAK,CAAL;AACE,gBAAU,iBAAV,CAA4B,aAA5B,EAA2C,EAAE,SAAS,MAAX,EAA3C;AAFJ;AAID,CALe,CAAhB;;AAOA,KAAK,gBAAL,CAAsB,SAAtB,EAAiC,UAAS,KAAT,EAAgB;AAC/C,QAAM,SAAN,CACE,OAAO,IAAP,CAAY,eAAZ,EAA6B,IAA7B,CAAkC,UAAS,KAAT,EAAgB;AAChD,WAAO,MAAM,MAAN,CAAa,CAClB,GADkB,EAElB,gBAFkB,EAGlB,2BAHkB,EAIlB,iBAJkB,CAAb,CAAP;AAMD,GAPD,CADF;AAUD,CAXD;;AAaA,KAAK,gBAAL,CAAsB,UAAtB,EAAkC,UAAS,KAAT,EAAgB;AAChD,QAAM,SAAN,CACE,OAAO,IAAP,GAAc,IAAd,CAAmB,UAAS,UAAT,EAAqB;AACtC,WAAO,QAAQ,GAAR,CACL,WAAW,MAAX,CAAkB,UAAS,SAAT,EAAoB;AACpC,aAAO,UAAU,UAAV,CAAqB,iBAArB,KACA,CAAC,UAAU,QAAV,CAAmB,SAAnB,CADR;AAED,KAHD,EAGG,GAHH,CAGO,UAAS,SAAT,EAAoB;AACzB,aAAO,OAAO,MAAP,CAAc,SAAd,CAAP;AACD,KALD,CADK,CAAP;AAQD,GATD,CADF;AAYD,CAbD;;AAeA,KAAK,gBAAL,CAAsB,OAAtB,EAA+B,UAAS,KAAT,EAAgB;AAC7C,MAAI,aAAa,IAAI,GAAJ,CAAQ,MAAM,OAAN,CAAc,GAAtB,CAAjB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAG,WAAW,MAAX,KAAsB,uBAAzB,EAAkD;AAChD,QAAG,WAAW,QAAX,KAAwB,cAA3B,EAA2C;;AAEzC,UAAG,UAAU,MAAb,EAAqB;AACnB,cAAM,WAAN,CACE,MAAM,MAAM,OAAZ,EACC,IADD,CACM,eAAO;AACX,cAAI,mBAAmB,IAAI,KAAJ,EAAvB;AACA,iBAAO,IAAI,IAAJ,GACN,IADM,CACD;AAAA,mBAAe,yBAAyB,WAAzB,CAAf;AAAA,WADC,EAEN,IAFM,CAED,YAAM;AACV,mBAAO,gBAAP;AACD,WAJM,CAAP;AAKD,SARD,CADF;AAWD,OAZD,MAYO;AACL,cAAM,WAAN,CACE,UAAU,IAAV,CAAe,cAAM;AACnB,iBAAO,GACJ,WADI,CACQ,aADR,EAEJ,WAFI,CAEQ,aAFR,EAGJ,MAHI,GAIJ,IAJI,CAIC,eAAO;AACX,gBAAI,OAAO,IAAI,IAAJ,CAAS,CAAC,KAAK,SAAL,CAAe,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAD,CAAT,EAAyC,EAAC,MAAO,kBAAR,EAAzC,CAAX;;AAEA,gBAAI,OAAO,EAAE,UAAW,GAAb,EAAmB,cAAe,qBAAlC,EAAX;AACA,mBAAO,IAAI,QAAJ,CAAa,IAAb,EAAmB,IAAnB,CAAP;AACD,WATI,CAAP;AAUD,SAXD,CADF;AAcD;AACF;AACF,GAhCD,MAgCO;AACL,UAAM,WAAN,CACE,OAAO,KAAP,CAAa,MAAM,OAAnB,EAA4B,IAA5B,CAAiC,UAAS,QAAT,EAAmB;AAClD,aAAO,YAAY,MAAM,MAAM,OAAZ,CAAnB;AACD,KAFD,CADF;AAKD;AAEF,CAlDD;;AAoDA,IAAM,2BAA2B,SAA3B,wBAA2B,CAAC,WAAD,EAAiB;AAChD,SAAO,UAAU,IAAV,CAAe,cAAM;AAC1B,QAAI,KAAK,GAAG,WAAH,CAAe,aAAf,EAA8B,WAA9B,CAAT;AACA,QAAI,cAAc,GAAG,WAAH,CAAe,aAAf,CAAlB;AACA,gBAAY,OAAZ,CAAoB,sBAAc;AAChC,kBAAY,GAAZ,CAAgB,UAAhB,EAA4B,WAAW,IAAvC;AACD,KAFD;AAGA,WAAO,GAAG,QAAV;AACD,GAPM,CAAP;AAQD,CATD;;AAWA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"build_sw.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import idb from 'idb';\r\n\r\nvar staticCacheName = 'mws-restaurant-static-v1';\r\nvar contentImgsCache = 'mws-restaurant-imgs';\r\nvar allCaches = [\r\n  staticCacheName,\r\n  contentImgsCache\r\n];\r\n\r\nvar dbPromise = idb.open('restaurants-db', 3, function(upgradeDb) {\r\n  switch(upgradeDb.oldVersion) {\r\n    case 0:\r\n      upgradeDb.createObjectStore('restaurants', { keypath: 'name' });\r\n  }\r\n});\r\n\r\nself.addEventListener('install', function(event) {\r\n  event.waitUntil(\r\n    caches.open(staticCacheName).then(function(cache) {\r\n      return cache.addAll([\r\n        '/',\r\n        '/dist/build.js',\r\n        '/dist/build_restaurant.js',\r\n        '/css/styles.css',\r\n      ]);\r\n    })\r\n  );\r\n});\r\n\r\nself.addEventListener('activate', function(event) {\r\n  event.waitUntil(\r\n    caches.keys().then(function(cacheNames) {\r\n      return Promise.all(\r\n        cacheNames.filter(function(cacheName) {\r\n          return cacheName.startsWith('mws-restaurant-') &&\r\n                 !allCaches.includes(cacheName);\r\n        }).map(function(cacheName) {\r\n          return caches.delete(cacheName);\r\n        })\r\n      );\r\n    })\r\n  );\r\n});\r\n\r\nself.addEventListener('fetch', function(event) {\r\n  var requestUrl = new URL(event.request.url);\r\n  \r\n  // if (requestUrl.origin === location.origin) {\r\n  //   if (requestUrl.pathname.startsWith('/img/')) {\r\n  //     event.respondWith(serveImage(event.request));\r\n  //     return;\r\n  //   }\r\n  // }\r\n  \r\n  if(requestUrl.origin === 'http://localhost:1337') {\r\n    if(requestUrl.pathname === '/restaurants') {\r\n\r\n      if(navigator.onLine) {\r\n        event.respondWith(\r\n          fetch(event.request)\r\n          .then(res => {\r\n            let originalResponse = res.clone();\r\n            return res.json()\r\n            .then(restaurants => addRestaurantsToDatabase(restaurants))\r\n            .then(() => {\r\n              return originalResponse\r\n            })\r\n          })\r\n        )\r\n      } else {\r\n        event.respondWith(\r\n          dbPromise.then(db => {\r\n            return db\r\n              .transaction('restaurants')\r\n              .objectStore('restaurants')\r\n              .getAll()\r\n              .then(res => {\r\n                var blob = new Blob([JSON.stringify(res, null, 2)], {type : 'application/json'});\r\n\r\n                var init = { \"status\" : 200 , \"statusText\" : \"SuperSmashingGreat!\" };\r\n                return new Response(blob, init);\r\n              });\r\n          })\r\n        )\r\n      }\r\n    }\r\n  } else {\r\n    event.respondWith(\r\n      caches.match(event.request).then(function(response) {\r\n        return response || fetch(event.request);\r\n      })\r\n    );\r\n  }\r\n\r\n});\r\n\r\nconst addRestaurantsToDatabase = (restaurants) => {\r\n  return dbPromise.then(db => {\r\n    var tx = db.transaction('restaurants', 'readwrite');\r\n    var keyValStore = tx.objectStore('restaurants');\r\n    restaurants.forEach(restaurant => {\r\n      keyValStore.put(restaurant, restaurant.name)\r\n    })\r\n    return tx.complete;\r\n  })\r\n}\r\n\r\n// function serveImage(request) {\r\n//   var storageUrl = request.url.replace(/-\\d+px\\.jpg$/, '');\r\n\r\n//   return caches.open(contentImgsCache).then(function(cache) {\r\n//     return cache.match(storageUrl).then(function(response) {\r\n//       if (response) return response;\r\n\r\n//       return fetch(request).then(function(networkResponse) {\r\n//         cache.put(storageUrl, networkResponse.clone());\r\n//         return networkResponse;\r\n//       });\r\n//     });\r\n//   });\r\n// }\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}